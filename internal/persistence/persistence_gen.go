package persistence

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *Client) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "lwt"
	o = append(o, 0x83, 0xa3, 0x6c, 0x77, 0x74)
	o, err = z.LWT.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LWT")
		return
	}
	// string "username"
	o = append(o, 0xa8, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendBytes(o, z.Username)
	// string "listener"
	o = append(o, 0xa8, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72)
	o = msgp.AppendString(o, z.Listener)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Client) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "lwt":
			bts, err = z.LWT.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LWT")
				return
			}
		case "username":
			z.Username, bts, err = msgp.ReadBytesBytes(bts, z.Username)
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "listener":
			z.Listener, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Listener")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Client) Msgsize() (s int) {
	s = 1 + 4 + z.LWT.Msgsize() + 9 + msgp.BytesPrefixSize + len(z.Username) + 9 + msgp.StringPrefixSize + len(z.Listener)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FixedHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "remaining"
	o = append(o, 0x85, 0xa9, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67)
	o = msgp.AppendInt(o, z.Remaining)
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendByte(o, z.Type)
	// string "qos"
	o = append(o, 0xa3, 0x71, 0x6f, 0x73)
	o = msgp.AppendByte(o, z.Qos)
	// string "dup"
	o = append(o, 0xa3, 0x64, 0x75, 0x70)
	o = msgp.AppendBool(o, z.Dup)
	// string "retain"
	o = append(o, 0xa6, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e)
	o = msgp.AppendBool(o, z.Retain)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FixedHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "remaining":
			z.Remaining, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Remaining")
				return
			}
		case "type":
			z.Type, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "qos":
			z.Qos, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Qos")
				return
			}
		case "dup":
			z.Dup, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Dup")
				return
			}
		case "retain":
			z.Retain, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Retain")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FixedHeader) Msgsize() (s int) {
	s = 1 + 10 + msgp.IntSize + 5 + msgp.ByteSize + 4 + msgp.ByteSize + 4 + msgp.BoolSize + 7 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z KeyValue) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "key"
	o = append(o, 0x82, 0xa3, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	// string "value"
	o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendString(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KeyValue) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "value":
			z.Value, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z KeyValue) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Key) + 6 + msgp.StringPrefixSize + len(z.Value)
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LWT) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "message"
	o = append(o, 0x84, 0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendBytes(o, z.Message)
	// string "topic"
	o = append(o, 0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63)
	o = msgp.AppendString(o, z.Topic)
	// string "qos"
	o = append(o, 0xa3, 0x71, 0x6f, 0x73)
	o = msgp.AppendByte(o, z.Qos)
	// string "retain"
	o = append(o, 0xa6, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e)
	o = msgp.AppendBool(o, z.Retain)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LWT) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "message":
			z.Message, bts, err = msgp.ReadBytesBytes(bts, z.Message)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		case "topic":
			z.Topic, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Topic")
				return
			}
		case "qos":
			z.Qos, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Qos")
				return
			}
		case "retain":
			z.Retain, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Retain")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LWT) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len(z.Message) + 6 + msgp.StringPrefixSize + len(z.Topic) + 4 + msgp.ByteSize + 7 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	//var zb0001Mask uint8 /* 7 bits */
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "payload"
	o = append(o, 0xa7, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o = msgp.AppendBytes(o, z.Payload)
	// string "fixed_header"
	o = append(o, 0xac, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72)
	o, err = z.FixedHeader.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "FixedHeader")
		return
	}
	// string "topic_name"
	o = append(o, 0xaa, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.TopicName)
	// string "sent"
	o = append(o, 0xa4, 0x73, 0x65, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.Sent)
	// string "resends"
	o = append(o, 0xa7, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x73)
	o = msgp.AppendInt(o, z.Resends)
	// string "packet_id"
	o = append(o, 0xa9, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64)
	o = msgp.AppendUint16(o, z.PacketID)
	// string "props"
	o = append(o, 0xa5, 0x70, 0x72, 0x6f, 0x70, 0x73)
	o, err = z.Properties.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Properties")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "fixed_header":
			bts, err = z.FixedHeader.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "FixedHeader")
				return
			}
		case "topic_name":
			z.TopicName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TopicName")
				return
			}
		case "sent":
			z.Sent, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sent")
				return
			}
		case "resends":
			z.Resends, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Resends")
				return
			}
		case "packet_id":
			z.PacketID, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PacketID")
				return
			}
		case "props":
			bts, err = z.Properties.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Properties")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Message) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len(z.Payload) + 13 + z.FixedHeader.Msgsize() + 11 + msgp.StringPrefixSize + len(z.TopicName) + 5 + msgp.Int64Size + 8 + msgp.IntSize + 10 + msgp.Uint16Size + 6 + z.Properties.Msgsize()
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MockStore) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Fail"
	o = append(o, 0x84, 0xa4, 0x46, 0x61, 0x69, 0x6c)
	o = msgp.AppendMapHeader(o, uint32(len(z.Fail)))
	for za0001, za0002 := range z.Fail {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendBool(o, za0002)
	}
	// string "FailOpen"
	o = append(o, 0xa8, 0x46, 0x61, 0x69, 0x6c, 0x4f, 0x70, 0x65, 0x6e)
	o = msgp.AppendBool(o, z.FailOpen)
	// string "Closed"
	o = append(o, 0xa6, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64)
	o = msgp.AppendBool(o, z.Closed)
	// string "Opened"
	o = append(o, 0xa6, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64)
	o = msgp.AppendBool(o, z.Opened)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MockStore) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Fail":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fail")
				return
			}
			if z.Fail == nil {
				z.Fail = make(map[string]bool, zb0002)
			} else if len(z.Fail) > 0 {
				for key := range z.Fail {
					delete(z.Fail, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 bool
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fail")
					return
				}
				za0002, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Fail", za0001)
					return
				}
				z.Fail[za0001] = za0002
			}
		case "FailOpen":
			z.FailOpen, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FailOpen")
				return
			}
		case "Closed":
			z.Closed, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Closed")
				return
			}
		case "Opened":
			z.Opened, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Opened")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MockStore) Msgsize() (s int) {
	s = 1 + 5 + msgp.MapHeaderSize
	if z.Fail != nil {
		for za0001, za0002 := range z.Fail {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.BoolSize
		}
	}
	s += 9 + msgp.BoolSize + 7 + msgp.BoolSize + 7 + msgp.BoolSize
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Properties) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.PayloadFormat == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.ContentType == "" {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.ResponseTopic == "" {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.CorrelationData == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.UserProperties == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "expiry"
	o = append(o, 0xa6, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79)
	o = msgp.AppendInt64(o, z.Expiry)
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "payload_format"
		o = append(o, 0xae, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74)
		if z.PayloadFormat == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendByte(o, *z.PayloadFormat)
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "content_type"
		o = append(o, 0xac, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65)
		o = msgp.AppendString(o, z.ContentType)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "resp_topic"
		o = append(o, 0xaa, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63)
		o = msgp.AppendString(o, z.ResponseTopic)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "corr_data"
		o = append(o, 0xa9, 0x63, 0x6f, 0x72, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61)
		o = msgp.AppendBytes(o, z.CorrelationData)
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "user_props"
		o = append(o, 0xaa, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.UserProperties)))
		for za0001 := range z.UserProperties {
			// map header, size 2
			// string "key"
			o = append(o, 0x82, 0xa3, 0x6b, 0x65, 0x79)
			o = msgp.AppendString(o, z.UserProperties[za0001].Key)
			// string "value"
			o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
			o = msgp.AppendString(o, z.UserProperties[za0001].Value)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Properties) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "expiry":
			z.Expiry, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Expiry")
				return
			}
		case "payload_format":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.PayloadFormat = nil
			} else {
				if z.PayloadFormat == nil {
					z.PayloadFormat = new(byte)
				}
				*z.PayloadFormat, bts, err = msgp.ReadByteBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PayloadFormat")
					return
				}
			}
		case "content_type":
			z.ContentType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContentType")
				return
			}
		case "resp_topic":
			z.ResponseTopic, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ResponseTopic")
				return
			}
		case "corr_data":
			z.CorrelationData, bts, err = msgp.ReadBytesBytes(bts, z.CorrelationData)
			if err != nil {
				err = msgp.WrapError(err, "CorrelationData")
				return
			}
		case "user_props":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserProperties")
				return
			}
			if cap(z.UserProperties) >= int(zb0002) {
				z.UserProperties = (z.UserProperties)[:zb0002]
			} else {
				z.UserProperties = make([]KeyValue, zb0002)
			}
			for za0001 := range z.UserProperties {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UserProperties", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "UserProperties", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "key":
						z.UserProperties[za0001].Key, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "UserProperties", za0001, "Key")
							return
						}
					case "value":
						z.UserProperties[za0001].Value, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "UserProperties", za0001, "Value")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "UserProperties", za0001)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Properties) Msgsize() (s int) {
	s = 1 + 7 + msgp.Int64Size + 15
	if z.PayloadFormat == nil {
		s += msgp.NilSize
	} else {
		s += msgp.ByteSize
	}
	s += 13 + msgp.StringPrefixSize + len(z.ContentType) + 11 + msgp.StringPrefixSize + len(z.ResponseTopic) + 10 + msgp.BytesPrefixSize + len(z.CorrelationData) + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.UserProperties {
		s += 1 + 4 + msgp.StringPrefixSize + len(z.UserProperties[za0001].Key) + 6 + msgp.StringPrefixSize + len(z.UserProperties[za0001].Value)
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Subscription) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	if z.NoLocal == false {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.RetainHandling == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.RetainAsPublished == false {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "filter"
	o = append(o, 0xa6, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72)
	o = msgp.AppendString(o, z.Filter)
	// string "qos"
	o = append(o, 0xa3, 0x71, 0x6f, 0x73)
	o = msgp.AppendByte(o, z.QoS)
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "nl"
		o = append(o, 0xa2, 0x6e, 0x6c)
		o = msgp.AppendBool(o, z.NoLocal)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "rh"
		o = append(o, 0xa2, 0x72, 0x68)
		o = msgp.AppendByte(o, z.RetainHandling)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "rap"
		o = append(o, 0xa3, 0x72, 0x61, 0x70)
		o = msgp.AppendBool(o, z.RetainAsPublished)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Subscription) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "filter":
			z.Filter, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filter")
				return
			}
		case "qos":
			z.QoS, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "QoS")
				return
			}
		case "nl":
			z.NoLocal, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NoLocal")
				return
			}
		case "rh":
			z.RetainHandling, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RetainHandling")
				return
			}
		case "rap":
			z.RetainAsPublished, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RetainAsPublished")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Subscription) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Filter) + 4 + msgp.ByteSize + 3 + msgp.BoolSize + 3 + msgp.ByteSize + 4 + msgp.BoolSize
	return
}
